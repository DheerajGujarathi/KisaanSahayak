{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nclass UserService {\n  constructor() {\n    this.currentUser = this.getCurrentUser();\n  }\n\n  // Get or create current user\n  getCurrentUser() {\n    let user = localStorage.getItem('kisaan_user');\n    if (!user) {\n      user = {\n        id: uuidv4(),\n        name: this.generateUserName(),\n        createdAt: new Date().toISOString(),\n        lastActive: new Date().toISOString()\n      };\n      localStorage.setItem('kisaan_user', JSON.stringify(user));\n    } else {\n      user = JSON.parse(user);\n      // Update last active time\n      user.lastActive = new Date().toISOString();\n      localStorage.setItem('kisaan_user', JSON.stringify(user));\n    }\n    return user;\n  }\n\n  // Generate a friendly user name\n  generateUserName() {\n    const adjectives = ['Smart', 'Green', 'Wise', 'Modern', 'Expert', 'Progressive', 'Skilled', 'Dedicated'];\n    const nouns = ['Farmer', 'Grower', 'Cultivator', 'Agriculturist', 'Gardener', 'Producer', 'Planter'];\n    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n    const noun = nouns[Math.floor(Math.random() * nouns.length)];\n    const number = Math.floor(Math.random() * 1000);\n    return `${adjective}${noun}${number}`;\n  }\n\n  // Update user name\n  updateUserName(newName) {\n    this.currentUser.name = newName;\n    localStorage.setItem('kisaan_user', JSON.stringify(this.currentUser));\n    return this.currentUser;\n  }\n\n  // Get user ID\n  getUserId() {\n    return this.currentUser.id;\n  }\n\n  // Get user name\n  getUserName() {\n    return this.currentUser.name;\n  }\n\n  // Reset user (create new user)\n  resetUser() {\n    localStorage.removeItem('kisaan_user');\n    localStorage.removeItem(`kisaan_chat_${this.currentUser.id}`);\n    this.currentUser = this.getCurrentUser();\n    return this.currentUser;\n  }\n\n  // Get all users (for future multi-user switching)\n  getAllUsers() {\n    const users = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key.startsWith('kisaan_user_')) {\n        const user = JSON.parse(localStorage.getItem(key));\n        users.push(user);\n      }\n    }\n    return users;\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["v4","uuidv4","UserService","constructor","currentUser","getCurrentUser","user","localStorage","getItem","id","name","generateUserName","createdAt","Date","toISOString","lastActive","setItem","JSON","stringify","parse","adjectives","nouns","adjective","Math","floor","random","length","noun","number","updateUserName","newName","getUserId","getUserName","resetUser","removeItem","getAllUsers","users","i","key","startsWith","push","userService"],"sources":["D:/RAG-Farmers/web-app/frontend/src/services/userService.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nclass UserService {\r\n  constructor() {\r\n    this.currentUser = this.getCurrentUser();\r\n  }\r\n\r\n  // Get or create current user\r\n  getCurrentUser() {\r\n    let user = localStorage.getItem('kisaan_user');\r\n    \r\n    if (!user) {\r\n      user = {\r\n        id: uuidv4(),\r\n        name: this.generateUserName(),\r\n        createdAt: new Date().toISOString(),\r\n        lastActive: new Date().toISOString()\r\n      };\r\n      \r\n      localStorage.setItem('kisaan_user', JSON.stringify(user));\r\n    } else {\r\n      user = JSON.parse(user);\r\n      // Update last active time\r\n      user.lastActive = new Date().toISOString();\r\n      localStorage.setItem('kisaan_user', JSON.stringify(user));\r\n    }\r\n    \r\n    return user;\r\n  }\r\n\r\n  // Generate a friendly user name\r\n  generateUserName() {\r\n    const adjectives = ['Smart', 'Green', 'Wise', 'Modern', 'Expert', 'Progressive', 'Skilled', 'Dedicated'];\r\n    const nouns = ['Farmer', 'Grower', 'Cultivator', 'Agriculturist', 'Gardener', 'Producer', 'Planter'];\r\n    \r\n    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r\n    const noun = nouns[Math.floor(Math.random() * nouns.length)];\r\n    const number = Math.floor(Math.random() * 1000);\r\n    \r\n    return `${adjective}${noun}${number}`;\r\n  }\r\n\r\n  // Update user name\r\n  updateUserName(newName) {\r\n    this.currentUser.name = newName;\r\n    localStorage.setItem('kisaan_user', JSON.stringify(this.currentUser));\r\n    return this.currentUser;\r\n  }\r\n\r\n  // Get user ID\r\n  getUserId() {\r\n    return this.currentUser.id;\r\n  }\r\n\r\n  // Get user name\r\n  getUserName() {\r\n    return this.currentUser.name;\r\n  }\r\n\r\n  // Reset user (create new user)\r\n  resetUser() {\r\n    localStorage.removeItem('kisaan_user');\r\n    localStorage.removeItem(`kisaan_chat_${this.currentUser.id}`);\r\n    this.currentUser = this.getCurrentUser();\r\n    return this.currentUser;\r\n  }\r\n\r\n  // Get all users (for future multi-user switching)\r\n  getAllUsers() {\r\n    const users = [];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key.startsWith('kisaan_user_')) {\r\n        const user = JSON.parse(localStorage.getItem(key));\r\n        users.push(user);\r\n      }\r\n    }\r\n    return users;\r\n  }\r\n}\r\n\r\nexport const userService = new UserService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}