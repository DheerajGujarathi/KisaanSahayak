{"ast":null,"code":"import { userService } from './userService';\nclass ChatHistoryService {\n  constructor() {\n    this.maxHistoryPerUser = 100; // Maximum messages per user\n  }\n\n  // Get storage key for current user\n  getStorageKey() {\n    return `kisaan_chat_${userService.getUserId()}`;\n  }\n\n  // Load chat history for current user\n  loadChatHistory() {\n    try {\n      const history = localStorage.getItem(this.getStorageKey());\n      return history ? JSON.parse(history) : [];\n    } catch (error) {\n      console.error('Error loading chat history:', error);\n      return [];\n    }\n  }\n\n  // Save chat history for current user\n  saveChatHistory(messages) {\n    try {\n      // Keep only the last N messages to prevent storage overflow\n      const trimmedMessages = messages.slice(-this.maxHistoryPerUser);\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(trimmedMessages));\n      return true;\n    } catch (error) {\n      console.error('Error saving chat history:', error);\n      return false;\n    }\n  }\n\n  // Add a message to history\n  addMessage(message) {\n    const history = this.loadChatHistory();\n    history.push({\n      ...message,\n      userId: userService.getUserId(),\n      timestamp: message.timestamp || new Date().toISOString()\n    });\n    return this.saveChatHistory(history);\n  }\n\n  // Clear chat history for current user\n  clearHistory() {\n    try {\n      localStorage.removeItem(this.getStorageKey());\n      return true;\n    } catch (error) {\n      console.error('Error clearing chat history:', error);\n      return false;\n    }\n  }\n\n  // Get chat sessions (for organizing conversations)\n  getChatSessions() {\n    const messages = this.loadChatHistory();\n    const sessions = [];\n    let currentSession = null;\n    messages.forEach((message, index) => {\n      // Create new session if it's the first message or there's a time gap\n      const previousMessage = messages[index - 1];\n      const timeDiff = previousMessage ? new Date(message.timestamp) - new Date(previousMessage.timestamp) : 0;\n\n      // Start new session if more than 1 hour gap or first message\n      if (!currentSession || timeDiff > 60 * 60 * 1000) {\n        currentSession = {\n          id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          title: this.generateSessionTitle(message),\n          startTime: message.timestamp,\n          messages: []\n        };\n        sessions.push(currentSession);\n      }\n      currentSession.messages.push(message);\n      currentSession.endTime = message.timestamp;\n    });\n    return sessions.reverse(); // Most recent first\n  }\n\n  // Generate a title for a chat session based on first message\n  generateSessionTitle(firstMessage) {\n    if (!firstMessage.text) return 'New Chat';\n    const text = firstMessage.text.toLowerCase();\n\n    // Common farming topics\n    if (text.includes('rice') || text.includes('paddy')) return '🌾 Rice Cultivation';\n    if (text.includes('wheat')) return '🌾 Wheat Farming';\n    if (text.includes('tomato')) return '🍅 Tomato Growing';\n    if (text.includes('pest') || text.includes('disease')) return '🐛 Pest Management';\n    if (text.includes('soil')) return '🌱 Soil Management';\n    if (text.includes('water') || text.includes('irrigation')) return '💧 Water Management';\n    if (text.includes('fertilizer') || text.includes('nutrient')) return '🧪 Fertilization';\n    if (text.includes('plant') || text.includes('crop')) return '🌿 Crop Planning';\n    if (text.includes('weather') || text.includes('climate')) return '🌤️ Weather Advice';\n\n    // Extract first few words as title\n    const words = firstMessage.text.split(' ').slice(0, 4).join(' ');\n    return words.length > 20 ? words.substring(0, 20) + '...' : words;\n  }\n\n  // Get statistics\n  getStats() {\n    var _messages$, _messages;\n    const messages = this.loadChatHistory();\n    const sessions = this.getChatSessions();\n    return {\n      totalMessages: messages.length,\n      userMessages: messages.filter(m => m.isUser).length,\n      botMessages: messages.filter(m => !m.isUser).length,\n      totalSessions: sessions.length,\n      oldestMessage: (_messages$ = messages[0]) === null || _messages$ === void 0 ? void 0 : _messages$.timestamp,\n      newestMessage: (_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.timestamp\n    };\n  }\n\n  // Export chat history (for backup)\n  exportHistory() {\n    const data = {\n      user: userService.getCurrentUser(),\n      messages: this.loadChatHistory(),\n      sessions: this.getChatSessions(),\n      stats: this.getStats(),\n      exportedAt: new Date().toISOString()\n    };\n    return JSON.stringify(data, null, 2);\n  }\n\n  // Import chat history (from backup)\n  importHistory(jsonData) {\n    try {\n      const data = JSON.parse(jsonData);\n      if (data.messages && Array.isArray(data.messages)) {\n        return this.saveChatHistory(data.messages);\n      }\n      return false;\n    } catch (error) {\n      console.error('Error importing chat history:', error);\n      return false;\n    }\n  }\n}\nexport const chatHistoryService = new ChatHistoryService();","map":{"version":3,"names":["userService","ChatHistoryService","constructor","maxHistoryPerUser","getStorageKey","getUserId","loadChatHistory","history","localStorage","getItem","JSON","parse","error","console","saveChatHistory","messages","trimmedMessages","slice","setItem","stringify","addMessage","message","push","userId","timestamp","Date","toISOString","clearHistory","removeItem","getChatSessions","sessions","currentSession","forEach","index","previousMessage","timeDiff","id","now","Math","random","toString","substr","title","generateSessionTitle","startTime","endTime","reverse","firstMessage","text","toLowerCase","includes","words","split","join","length","substring","getStats","_messages$","_messages","totalMessages","userMessages","filter","m","isUser","botMessages","totalSessions","oldestMessage","newestMessage","exportHistory","data","user","getCurrentUser","stats","exportedAt","importHistory","jsonData","Array","isArray","chatHistoryService"],"sources":["D:/RAG-Farmers/frontend/src/services/chatHistoryService.js"],"sourcesContent":["import { userService } from './userService';\r\n\r\nclass ChatHistoryService {\r\n  constructor() {\r\n    this.maxHistoryPerUser = 100; // Maximum messages per user\r\n  }\r\n\r\n  // Get storage key for current user\r\n  getStorageKey() {\r\n    return `kisaan_chat_${userService.getUserId()}`;\r\n  }\r\n\r\n  // Load chat history for current user\r\n  loadChatHistory() {\r\n    try {\r\n      const history = localStorage.getItem(this.getStorageKey());\r\n      return history ? JSON.parse(history) : [];\r\n    } catch (error) {\r\n      console.error('Error loading chat history:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Save chat history for current user\r\n  saveChatHistory(messages) {\r\n    try {\r\n      // Keep only the last N messages to prevent storage overflow\r\n      const trimmedMessages = messages.slice(-this.maxHistoryPerUser);\r\n      localStorage.setItem(this.getStorageKey(), JSON.stringify(trimmedMessages));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error saving chat history:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Add a message to history\r\n  addMessage(message) {\r\n    const history = this.loadChatHistory();\r\n    history.push({\r\n      ...message,\r\n      userId: userService.getUserId(),\r\n      timestamp: message.timestamp || new Date().toISOString()\r\n    });\r\n    \r\n    return this.saveChatHistory(history);\r\n  }\r\n\r\n  // Clear chat history for current user\r\n  clearHistory() {\r\n    try {\r\n      localStorage.removeItem(this.getStorageKey());\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error clearing chat history:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get chat sessions (for organizing conversations)\r\n  getChatSessions() {\r\n    const messages = this.loadChatHistory();\r\n    const sessions = [];\r\n    let currentSession = null;\r\n    \r\n    messages.forEach((message, index) => {\r\n      // Create new session if it's the first message or there's a time gap\r\n      const previousMessage = messages[index - 1];\r\n      const timeDiff = previousMessage ? \r\n        new Date(message.timestamp) - new Date(previousMessage.timestamp) : 0;\r\n      \r\n      // Start new session if more than 1 hour gap or first message\r\n      if (!currentSession || timeDiff > 60 * 60 * 1000) {\r\n        currentSession = {\r\n          id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n          title: this.generateSessionTitle(message),\r\n          startTime: message.timestamp,\r\n          messages: []\r\n        };\r\n        sessions.push(currentSession);\r\n      }\r\n      \r\n      currentSession.messages.push(message);\r\n      currentSession.endTime = message.timestamp;\r\n    });\r\n    \r\n    return sessions.reverse(); // Most recent first\r\n  }\r\n\r\n  // Generate a title for a chat session based on first message\r\n  generateSessionTitle(firstMessage) {\r\n    if (!firstMessage.text) return 'New Chat';\r\n    \r\n    const text = firstMessage.text.toLowerCase();\r\n    \r\n    // Common farming topics\r\n    if (text.includes('rice') || text.includes('paddy')) return '🌾 Rice Cultivation';\r\n    if (text.includes('wheat')) return '🌾 Wheat Farming';\r\n    if (text.includes('tomato')) return '🍅 Tomato Growing';\r\n    if (text.includes('pest') || text.includes('disease')) return '🐛 Pest Management';\r\n    if (text.includes('soil')) return '🌱 Soil Management';\r\n    if (text.includes('water') || text.includes('irrigation')) return '💧 Water Management';\r\n    if (text.includes('fertilizer') || text.includes('nutrient')) return '🧪 Fertilization';\r\n    if (text.includes('plant') || text.includes('crop')) return '🌿 Crop Planning';\r\n    if (text.includes('weather') || text.includes('climate')) return '🌤️ Weather Advice';\r\n    \r\n    // Extract first few words as title\r\n    const words = firstMessage.text.split(' ').slice(0, 4).join(' ');\r\n    return words.length > 20 ? words.substring(0, 20) + '...' : words;\r\n  }\r\n\r\n  // Get statistics\r\n  getStats() {\r\n    const messages = this.loadChatHistory();\r\n    const sessions = this.getChatSessions();\r\n    \r\n    return {\r\n      totalMessages: messages.length,\r\n      userMessages: messages.filter(m => m.isUser).length,\r\n      botMessages: messages.filter(m => !m.isUser).length,\r\n      totalSessions: sessions.length,\r\n      oldestMessage: messages[0]?.timestamp,\r\n      newestMessage: messages[messages.length - 1]?.timestamp\r\n    };\r\n  }\r\n\r\n  // Export chat history (for backup)\r\n  exportHistory() {\r\n    const data = {\r\n      user: userService.getCurrentUser(),\r\n      messages: this.loadChatHistory(),\r\n      sessions: this.getChatSessions(),\r\n      stats: this.getStats(),\r\n      exportedAt: new Date().toISOString()\r\n    };\r\n    \r\n    return JSON.stringify(data, null, 2);\r\n  }\r\n\r\n  // Import chat history (from backup)\r\n  importHistory(jsonData) {\r\n    try {\r\n      const data = JSON.parse(jsonData);\r\n      if (data.messages && Array.isArray(data.messages)) {\r\n        return this.saveChatHistory(data.messages);\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error importing chat history:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const chatHistoryService = new ChatHistoryService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}